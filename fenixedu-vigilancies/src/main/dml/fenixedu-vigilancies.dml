package org.fenixedu.academic.domain;

enum org.fenixedu.academic.domain.vigilancy.AttendingStatus as AttendingStatus;

class vigilancy.ExamCoordinator  {
    Boolean allowedToCreateGroups;
}

class vigilancy.UnavailablePeriod  {
    DateTime beginDate;
    DateTime endDate;
    String justification;
}

class vigilancy.Vigilancy  {
    Boolean active;
    AttendingStatus status;
}

class vigilancy.OtherCourseVigilancy extends vigilancy.Vigilancy {
    Boolean confirmed;
}

class vigilancy.OwnCourseVigilancy extends vigilancy.Vigilancy {
}

class vigilancy.VigilantGroup  {
    DateTime beginOfFirstPeriodForUnavailablePeriods;
    DateTime beginOfSecondPeriodForUnavailablePeriods;
    String contactEmail;
    String emailSubjectPrefix;  
    String convokeStrategy;
    DateTime endOfFirstPeriodForUnavailablePeriods;
    DateTime endOfSecondPeriodForUnavailablePeriods;
    String name;
    Integer pointsForConvoked;
    Integer pointsForDisconvoked;
    Integer pointsForDismissed;
    Integer pointsForDismissedTeacher;
    Integer pointsForMissing;
    Integer pointsForMissingTeacher;
    Integer pointsForTeacher;
    String rulesLink;
}

class vigilancy.VigilantWrapper  {
    BigDecimal pointsWeight;
    BigDecimal startPoints;
    Boolean convokable;
    String justification;
}

class accessControl.PersistentVigilancyGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup;

relation ConvokeForWrittenEvaluation {
    vigilancy.Vigilancy playsRole vigilancies {
        multiplicity *;
    }
    WrittenEvaluation playsRole writtenEvaluation;
}

relation VigilantAttendedWrittenEvaluation {
    vigilancy.Vigilancy playsRole attendedVigilancies {
        multiplicity *;
    }
    WrittenEvaluation playsRole attendedWrittenEvaluation;
}

relation ConvokingVigilantWrapper {
    vigilancy.VigilantWrapper playsRole vigilantWrapper;
    vigilancy.Vigilancy playsRole vigilancies {
        multiplicity *;
    }
}

relation VigilantGroupVigilantWrapper {
    vigilancy.VigilantGroup playsRole vigilantGroup;
    vigilancy.VigilantWrapper playsRole vigilantWrappers {
        multiplicity *;
    }
}

relation VigilantWrapperPerson {
    vigilancy.VigilantWrapper playsRole vigilantWrappers {
        multiplicity *;
    }
    Person playsRole person;
}

relation PersonIsUnavailable {
    Person playsRole person;
    vigilancy.UnavailablePeriod playsRole unavailablePeriods {
        multiplicity *;
    }
}

relation VigilantWrapperRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    vigilancy.VigilantWrapper playsRole vigilantWrappers {
        multiplicity *;
    }
}

relation PersonIncompatibleVigilant {
    Person playsRole incompatiblePerson;
    Person playsRole incompatibleVigilant;
}

relation ExamCoordinatorBelongToUnit {
    vigilancy.ExamCoordinator playsRole examCoordinators {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole unit;
}

relation ExamCoordinatorInExecutionYear {
    vigilancy.ExamCoordinator playsRole examCoordinators {
        multiplicity *;
    }
    ExecutionYear playsRole executionYear;
}

relation ExamCoordinatorManagesVigilantGroup {
    vigilancy.ExamCoordinator playsRole examCoordinators {
        multiplicity *;
    }
    vigilancy.VigilantGroup playsRole vigilantGroups {
        multiplicity *;
    }
}

relation ExamCoordinatorPerson {
    vigilancy.ExamCoordinator playsRole examCoordinators {
        multiplicity *;
    }
    Person playsRole person;
}

relation ExecutionCourseBelongsToGroup {
    vigilancy.VigilantGroup playsRole vigilantGroup;
    ExecutionCourse playsRole executionCourses {
        multiplicity *;
    }
}

relation RootDomainExamCoordinator {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    vigilancy.ExamCoordinator playsRole examCoordinators {
        multiplicity *;
    }
}

relation RootDomainUnavailablePeriod {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    vigilancy.UnavailablePeriod playsRole unavailablePeriods {
        multiplicity *;
    }
}

relation RootDomainVigilancy {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    vigilancy.Vigilancy playsRole vigilancies {
        multiplicity *;
    }
}

relation RootDomainVigilantGroup {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    vigilancy.VigilantGroup playsRole vigilantGroups {
        multiplicity *;
    }
}

relation VigilantGroupBelongsToUnit {
    vigilancy.VigilantGroup playsRole vigilantGroups {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole unit;
}

relation VigilantGroupInExecutionYear {
    vigilancy.VigilantGroup playsRole vigilantGroups {
        multiplicity *;
    }
    ExecutionYear playsRole executionYear;
}

relation PersistentVigilancyGroupVigilancy {
    public accessControl.PersistentVigilancyGroup playsRole vigilancyGroup {
        multiplicity 0..1;
    }
    public vigilancy.Vigilancy playsRole vigilancy {
        multiplicity 1..1;
    }
}

